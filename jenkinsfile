pipeline {
  agent any

  tools {
    nodejs '22' // Asegúrate de que este nombre coincida con la configuración de NodeJS en Jenkins
    dockerTool 'docker' // Herramienta Docker del plugin
  }

  environment {
    AWS_DEFAULT_REGION = "us-east-2"
  }
  
  stages {
    stage('Checkout') { steps { checkout scm } }
    stage('Build & Test') {
      steps {
        sh 'npm ci'
        sh 'npm run build'
      }
    }
    stage('Docker Build & Push') {
      steps {
        script {
          def imageRepo = "potentes.jfrog.io/docker-dev/potentes-frontend"
          def commitSha = env.GIT_COMMIT?.take(7) ?: "dev"
          
          // Verificar que Docker esté disponible e iniciar el daemon
          sh '''
            docker --version
            # Intentar iniciar Docker si no está corriendo
            if ! docker info >/dev/null 2>&1; then
              echo "Iniciando Docker daemon..."
              sudo dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2376 &
              sleep 10
              # Verificar que Docker esté funcionando
              docker info
            fi
          '''
          
          withCredentials([usernamePassword(credentialsId: 'jfrog', usernameVariable: 'username', passwordVariable: 'password')]) {
            sh "docker build -t ${imageRepo}:${commitSha} -t ${imageRepo}:staging ."
            sh "echo $password | docker login -u $username --password-stdin potentes.jfrog.io"
            sh "docker push ${imageRepo}:${commitSha}"
            sh "docker push ${imageRepo}:staging"
          }
        }
      }
    }
    stage('Deploy to ECS') {
      steps {
        withAWS(credentials: 'aws-potentes', region: "us-east-2") {
          sh "aws ecs update-service --cluster potente-cluster-prod --service potentes-frontend-service --force-new-deployment"
        }
      }
    }
  }
}